# -*- coding: utf-8 -*-
"""ApsiyonPark.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tcXEJwFDgf18oQvwLTsaTsJRpHNiyBYo
"""

#NOT: Bu model Colab ile geliştirilmiştir. yolov3 ağırlıkları proje dosyasında paylaşılmıştır. Ağırlıklar Kaggle platformundan edinilmiştir.
import cv2
import numpy as np
import psycopg2
from flask import Flask, jsonify

net = cv2.dnn.readNet('yolov3_2000.weights', 'yolov3.cfg')
classes = ['car', 'truck', 'motorbike']
#Temsili sunucu girişini gösteriyoruz
conn = psycopg2.connect(
    dbname="parking_system",
    user="parking_user",
    password="password",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

# Otopark düzeni temsilidir. 0'lar boş alan, 1'ler dolu alan, -1'ler park alanı olmayan alanları temsil eder.
parking_layout = np.array([
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1,  0,  0, -1,  0,  0, -1,  0,  0, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
])

cur.execute("SELECT location, roi_x, roi_y, roi_width, roi_height, stream_url FROM cameras")
rows = cur.fetchall()
cameras = [{'location': row[0], 'roi': (row[1], row[2], row[3], row[4]), 'stream': cv2.VideoCapture(row[5])} for row in rows]

def map_camera_to_parking(camera_location, vehicle_position, roi):
    x, y, w, h = roi
    px, py = vehicle_position
    parking_x = int((px - x) / w * len(parking_layout[0]))
    parking_y = int((py - y) / h * len(parking_layout))
    if 0 <= parking_x < len(parking_layout[0]) and 0 <= parking_y < len(parking_layout):
        return (parking_y, parking_x)
    return None

def reset_parking_layout():
    global parking_layout
    parking_layout[parking_layout == 1] = 0

def update_parking_layout():
    reset_parking_layout()
    for camera in cameras:
        ret, img = camera['stream'].read()
        if not ret:
            print(f" {camera['location']} konumundaki kamera çalışmıyor.")
            continue

        height, width, _ = img.shape

        blob = cv2.dnn.blobFromImage(img, 1/255, (416, 416), (0,0,0), swapRB=True, crop=False)
        net.setInput(blob)

        layer_names = net.getLayerNames()
        output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
        outs = net.forward(output_layers)

        vehicle_positions = []

        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5 and classes[class_id] in ['car', 'truck', 'motorbike']:
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    vehicle_positions.append((center_x, center_y))

        for position in vehicle_positions:
            mapped_position = map_camera_to_parking(camera['location'], position, camera['roi'])
            if mapped_position and parking_layout[mapped_position] == 0:
                parking_layout[mapped_position] = 1

def calculate_parking_percentage():
    total_slots = np.count_nonzero(parking_layout == 0) + np.count_nonzero(parking_layout == 1)
    occupied_slots = np.count_nonzero(parking_layout == 1)
    empty_slots = total_slots - occupied_slots
    return empty_slots / total_slots * 100

# Kullanıcı arayüzü (Flask kullanılarak oluşturuyoruz. Android iletişimi buradan sağlanacak)
app = Flask(__name__)

@app.route('/')
def home():
    update_parking_layout()
    empty_percentage = calculate_parking_percentage()
    return jsonify({
        "parking_layout": parking_layout.tolist(),
        "empty_percentage": empty_percentage
    })

if __name__ == '__main__':
    app.run(debug=True)

# Kamera akışlarını serbest bırak
for camera in cameras:
    camera['stream'].release()
cv2.destroyAllWindows()